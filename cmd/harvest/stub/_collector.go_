package main

import (
	"goharvest2/poller/collector"
	"goharvest2/share/matrix"

	/* You might want to uncomment and use some of these:

	"goharvest2/share/logger"
	"goharvest2/share/errors"
	*/
)

/* Logging is useful for debugging your collector, here are a few exmaples:

	logger.Warn(c.Prefix, "nothing to collect")
	logger.Debug(c.Prefix, "collected %d data points!!", count)
	logger.Error(c.Prefix, "open URL: %s", err.Error())

	(the examples assume you are in a struct method with receiver "c")
*/

/*
You collector is initialized with a number of fields, some of them are important to know:
  - Name		your name!
  - Object		name of your object
  - Matrix      this is where you put collected data
  - Options     the startup options of the poller
  - Params		parameters loaded from harvest.yml and the template of your collector
  - Prefix		formatted prefix for logger
You can add more attributes to the collector if you want!
*/
type COLLECTOR struct {
	*collector.AbstractCollector
}

/*
This method creates a new instance of your collector, no need to touch it.
*/
func New(a *collector.AbstractCollector) collector.Collector {
	return &COLLECTOR{AbstractCollector: a}
}

/* This method initializes your collector. You can add more things here, bur remove
   "collector.Init(c)" only if you know what you are doing. The last method will initialize
   the schedule of your collector, its metadata and will run a few other important 
   procedures.

   Most commonly you will check that important parameters are not missing.
   You can also add metric to the Matrix if they will never change. Examples:

   if me.Params.GetChildContentS("addr") == "" {
	   return errors.New(errors.MISSING_PARAM, "addr")
   }

   if err := c.Matrix.NewMetricInt64("some_methirc"); err != nil {
	   return err
   }
*/
func (c *COLLECTOR) Init() error {
	return collector.Init(c)
}


/* This is the only method that needs to be written by You!
   The *matrix.Matrix that is returned is most commonly me.Matrix.
   Remember to return serious errors and log trivial ones
*/
func (c *COLLECTOR) PollData() (*matrix.Matrix, error) {

	// first flush data from previous poll
	c.Matrix.Reset()

	/* collect data and feed into me.Matrix
	   remember you need to declare metrics and instances before adding values
	   examples will floow
	*/

	var (
		metric matrix.Metric
		instance *matrix.Instance
		err error
	)

	// example adding a metric (remember to first check if it's already exists)

	if metric = c.Matrix.GetMetric("some_metric"); metric == nil {
		// metrics are typed (int, int32, uint64, float32 etc..)
		if metric, err = c.Matrix.NewMetricInt("some_metric); err != nil {
			return nil, err
		}
	}

	// adding new instance is very similar

	if instance = c.Matrix.GetInstance("some_instance"); instance == nil {
		if instance, err = c.Matrix.NewInstance("some_instance); err != nil {
			return nil, err
		} else {
			// here we can add labels to our instance
			instance.SetLabel("name", "my_name")
		}
	}

	// now we can set numeric values

	if err = metric.SetValueString(instance, "10"); err != nil { // matrix will convert the value for us
		return nil, err
	}

	if err = metric.AddValueInt(instance, 10); err != nil {
		return nil, err
	}
	// now the value for "some_instance" is 20!

	return c.Matrix, nil
}